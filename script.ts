// 1.1 INTERFACE PARA ANIMAIS - FICHA OBRIGAT√ìRIA
interface Animal {
    id: number;           //N√∫mero √∫nico para identificar cada animal
    nome: string;         //Nome do animal - deve ser texto
    especie: string;      //Tipo: "cachorro", "gato", "p√°ssaro", etc
    idade: number;        //Idade em anos - deve ser n√∫mero
    peso: number;         //Peso em kg - deve ser n√∫mero  
    vacinado: boolean;    //true = j√° vacinado, false = n√£o vacinado
    cor: string;          //Cor do animal: "preto", "branco", "marrom"
    raca: string;         //Ra√ßa: "vira-lata", "siam√™s", "poodle" - CORRIGIDO: ra√ßa ‚Üí raca
}

// 1.2 INTERFACE PARA SERVI√áOS - O QUE NOSSO PETSHOP OFERECE
interface Servico {
    id: number;           //N√∫mero √∫nico para cada servi√ßos
    tipo: string;         //Tipo de servi√ßos: "banho", "tosa", "consulta", etc
    animalId: number;     //ID do animal que vai receber o servi√ßos
    preco: number;        //Pre√ßo em reais - deve ser n√∫mero
    concluido: boolean;   //true = servi√ßos feitos, false = ainda n√£o feitos
    data: string;         //Data do servi√ßo: "20/03/2024"
    funcionario: string;  //Nome do funcion√°rio respons√°vel
}

// ==============================================
// 2. LISTAS - ONDE GUARDAMOS NOSSOS DADOS
// ==============================================

let animais: Animal[] = [];
let servicos: Servico[] = [];

// OP√á√ÉO C ESCOLHIDA:
let funcionarios: string[] = ["Jo√£o", "Maria", "Carlos"];

// ==============================================
// 3. FUN√á√ïES PRINCIPAIS - O "MOTOR" DO SISTEMA
// ==============================================

// 3.1 FUN√á√ÉO PARA CALCULAR IDADE DO ANIMAL
function calcularIdade(anoNascimento: number): number {
    const anoAtual: number = new Date().getFullYear();
    return anoAtual - anoNascimento;
}

// 3.2 FUN√á√ÉO PARA CRIAR UM NOVO ANIMAL 
function criarAnimal(nome: string, especie: string, idade: number, peso: number, cor: string, raca: string): Animal {
    return {
        id: Math.floor(Math.random() * 1000),
        nome: nome,
        especie: especie,
        idade: idade,
        peso: peso,
        vacinado: false,
        cor: cor,
        raca: raca  
    };
}

// 3.3 FUN√á√ÉO PARA AGENDAR SERVI√áOS
function agendarServico(servico: Servico): string {  
    servicos.push(servico);
    return `‚úÖ Servi√ßo de ${servico.tipo} agendado! Pre√ßo: R$ ${servico.preco}`;
}

// FUN√á√ÉO para calcular pre√ßo total de servi√ßos
function calcularPrecoTotal(): number {
    let total: number = 0;
    servicos.forEach(servico => {
        total += servico.preco;
    });
    return total;
}

// FUN√á√ÉO para buscar animal pelo nome
function buscarAnimalPorNome(nome: string): Animal | undefined {
    return animais.find(animal => animal.nome.toLowerCase() === nome.toLowerCase());
}

// ==============================================
// 4. FUN√á√ïES DOS BOT√ïES - CONECTAM COM O HTML
// ==============================================

// BOT√ÉO 1: MOSTRAR TIPOS B√ÅSICOS DO TYPESCRIPT
function mostrarTipos(): void {
    const resultado = document.getElementById('resultado');
    if (!resultado) return;
    
    resultado.innerHTML = `
        <div class="animal-card">
            <h3>üìù Tipos do TypeScript</h3>
            <p><strong>string:</strong> para textos ‚Üí "Rex", "gato"</p>
            <p><strong>number:</strong> para n√∫meros ‚Üí 5, 15.5, 2024</p>
            <p><strong>boolean:</strong> para verdadeiro/falso ‚Üí true, false</p>
            <p><strong>string[]:</strong> para listas de texto ‚Üí ["banho", "tosa"]</p>
            <small>‚ú® O TypeScript n√£o deixa misturar tipos!</small>
        </div>
    `;
}

// BOT√ÉO 2: MOSTRAR EXEMPLOS DE ANIMAIs
function mostrarAnimais(): void {  
    const resultado = document.getElementById('resultado');
    if (!resultado) return;

    // ANIMAIS EXEMPLO COM NOVOS CAMPOS
    const animal1: Animal = {
        id: 1,
        nome: "Pa√ßoca",
        especie: "Gato",
        idade: 1,
        peso: 3.5,
        vacinado: true,
        cor: "Amarelo",
        raca: "Siam√™s"  
    };

    const animal2: Animal = {
        id: 2,
        nome: "Toby",
        especie: "Cachorro",
        idade: 2,
        peso: 15.0,
        vacinado: false,
        cor: "preto",
        raca: "Labrador"  
    };

    resultado.innerHTML = `
        <div class="animal-card">
            <h3>üêï ${animal1.nome}</h3>
            <p><strong>Esp√©cie:</strong> ${animal1.especie}</p>
            <p><strong>Idade:</strong> ${animal1.idade} anos</p>
            <p><strong>Peso:</strong> ${animal1.peso} kg</p>
            <p><strong>Cor:</strong> ${animal1.cor}</p>
            <p><strong>Ra√ßa:</strong> ${animal1.raca}</p>
            <p><strong>Vacinado:</strong> ${animal1.vacinado ? '‚úî Sim' : '‚úñ N√£o'}</p>
        </div>
        <div class="animal-card">
            <h3>üêà ${animal2.nome}</h3>
            <p><strong>Esp√©cie:</strong> ${animal2.especie}</p>
            <p><strong>Idade:</strong> ${animal2.idade} anos</p>
            <p><strong>Peso:</strong> ${animal2.peso} kg</p>
            <p><strong>Cor:</strong> ${animal2.cor}</p>
            <p><strong>Ra√ßa:</strong> ${animal2.raca}</p>
            <p><strong>Vacinado:</strong> ${animal2.vacinado ? '‚úî Sim' : '‚úñ N√£o'}</p>
        </div>
    `;
}

// BOT√ÉO 3: TESTAR NOSSAS FUN√á√ïES 
function testarFuncoes(): void {  
    const resultado = document.getElementById('resultado');
    if (!resultado) return;
    
    resultado.innerHTML = `
        <div class="animal-card">
            <h3>‚öôÔ∏è Testando Nossas Fun√ß√µes</h3>
            <p>Aguarde 1 segundo para ver os resultados...</p>
        </div>
    `;

    setTimeout(() => {
        // TESTANDO fun√ß√£o calcularIdade
        const idadeCalculada = calcularIdade(2020);
        
        // TESTANDO fun√ß√£o criarAnimal
        const novoAnimal = criarAnimal("Bobby", "cachorro", 2, 8.5, "preto", "labrador");
        
        // TESTANDO fun√ß√£o agendarServico
        const servico: Servico = {
            id: 1,
            tipo: 'banho',
            animalId: novoAnimal.id,
            preco: 45.90,
            concluido: false,
            data: "25/03/2024",
            funcionario: "Maria"
        };
        
        const mensagemServico = agendarServico(servico);  

        // MOSTRANDO RESULTADOS NA TELA
        resultado.innerHTML += `
            <div class="animal-card">
                <h4>üìÖ C√°lculo de Idade</h4>
                <p>Animal nascido em 2020 tem <strong>${idadeCalculada} anos</strong> em ${new Date().getFullYear()}</p>
            </div>
            <div class="animal-card">
                <h4>üêï Animal Criado</h4>
                <p><strong>Nome:</strong> ${novoAnimal.nome}</p>
                <p><strong>Esp√©cie:</strong> ${novoAnimal.especie}</p>
                <p><strong>Idade:</strong> ${novoAnimal.idade} anos</p>
                <p><strong>Cor:</strong> ${novoAnimal.cor}</p>
                <p><strong>Ra√ßa:</strong> ${novoAnimal.raca}</p>
            </div>
            <div class="animal-card">
                <h4>üìã Servi√ßo Agendado</h4>
                <p>${mensagemServico}</p>
                <p><strong>Funcion√°rio:</strong> ${servico.funcionario}</p>
            </div>
        `;
    }, 1000);
}

// BOT√ÉO 4: MOSTRAR ERROS QUE TYPESCRIPT EVITA
function mostrarErros(): void {  
    const resultado = document.getElementById('resultado');
    if (!resultado) return;
    
    resultado.innerHTML = `
        <div class="erro-card">
            <h3>üö® Erros que o TypeScript Previne</h3>
            <p>Estes c√≥digos <strong>N√ÉO COMPILAM</strong> no TypeScript:</p>
        </div>
        <div class="erro-card">
            <h4>‚ùå ERRO 1: Tipo Incorreto</h4>
            <p><code>let idade: number = "5";</code></p>
            <small>üö´ N√£o pode colocar texto em vari√°vel de n√∫mero</small>
            <small>üí° <strong>Problema do Petshop:</strong> "5 anos" vira "51" na soma</small>
        </div>
        <div class="erro-card">
            <h4>‚ùå ERRO 2: Ficha Incompleta</h4>
            <p><code>let animal: Animal = { nome: "Rex" };</code></p>
            <small>üö´ Tem que preencher TODAS as informa√ß√µes do animal</small>
            <small>üí° <strong>Problema do Petshop:</strong> Fichas de animais incompletas</small>
        </div>
        <div class="animal-card">
            <h4>‚úÖ Vantagem do TypeScript</h4>
            <p>Estes erros s√£o descobertos <strong>ANTES</strong> de executar o c√≥digo!</p>
            <p>No JavaScript normal, o CLIENTE √© que descobriria esses erros! üò±</p>
        </div>
    `;
}

// BOT√ÉO 5: CADASTRAR NOVO ANIMAL 
function cadastrarAnimal(): void {
    const resultado = document.getElementById('resultado');
    if (!resultado) return;
    
    resultado.innerHTML = `
        <div class="animal-card">
            <h3>‚ûï Cadastrando Novo Animal...</h3>
            <p>Aguarde 2 segundos enquanto n√≥s cadastramos...</p>
        </div>
    `;

    setTimeout(() => {
        // CRIANDO um animal automaticamente com novos campos
        const novoAnimal = criarAnimal("Luna", "gato", 1, 3.2, "cinza", "persa");
        animais.push(novoAnimal);

        resultado.innerHTML = `
            <div class="animal-card">
                <h3>‚úÖ Animal Cadastrado com Sucesso!</h3>
                <p><strong>Nome:</strong> ${novoAnimal.nome}</p>
                <p><strong>Esp√©cie:</strong> ${novoAnimal.especie}</p>
                <p><strong>Idade:</strong> ${novoAnimal.idade} ano</p>
                <p><strong>Peso:</strong> ${novoAnimal.peso} kg</p>
                <p><strong>Cor:</strong> ${novoAnimal.cor}</p>
                <p><strong>Ra√ßa:</strong> ${novoAnimal.raca}</p>
                <p><strong>ID:</strong> ${novoAnimal.id}</p>
                <p><strong>Vacinado:</strong> ${novoAnimal.vacinado ? '‚úÖ Sim' : '‚ùå N√£o'}</p>
                <small>‚ú® Total de animais cadastrados: ${animais.length}</small>
            </div>
        `;
    }, 2000);
}

// FUN√á√ÉO EXTRA PARA BOT√ÉO: MOSTRAR SERVI√áOS
function mostrarServicos(): void {  
    const resultado = document.getElementById('resultado');
    if (!resultado) return;
    
    let html = '<div class="animal-card"><h3>üìã Servi√ßos Agendados</h3>';
    
    if (servicos.length === 0) {
        html += '<p>Nenhum servi√ßo agendado ainda.</p>';
    } else {
        servicos.forEach(servico => {
            html += `
                <div style="border: 1px solid #ddd; padding: 10px; margin: 10px 0; border-radius: 5px;">
                    <p><strong>Tipo:</strong> ${servico.tipo}</p>
                    <p><strong>Pre√ßo:</strong> R$ ${servico.preco}</p>
                    <p><strong>Data:</strong> ${servico.data}</p>
                    <p><strong>Funcion√°rio:</strong> ${servico.funcionario}</p>
                    <p><strong>Status:</strong> ${servico.concluido ? '‚úÖ Conclu√≠do' : '‚è≥ Pendente'}</p>
                </div>
            `;
        });
    }
    
    html += `</div>`;
    resultado.innerHTML = html;
}

// ==============================================
// 5. MENSAGEM INICIAL
// ==============================================
console.log("üöÄ Sistema PetShop carregado com sucesso!");
console.log("üêæ Desenvolvido com TypeScript para evitar erros!");